@page "/train-routes"
@inject HttpClient HttpClient
@using System.Net.Http.Json;
@using System.Net.Http.Headers;
@using Blazor.Data;
@inject NavigationManager Navigation

<PageTitle>Train routes</PageTitle>

<h1>Train routes</h1>

<a class="btn btn-primary" href="/train-routes/add" role="button">New route</a>

@if(isLoading)
{
    <p>Loading...</p>
}
else if(!string.IsNullOrEmpty(errorMessage))
{
    <p>@errorMessage</p>
}
else
{
<table class="table">
    <thead>
        <tr>
            <th scope="col">Name</th>
            <th scope="col">Cities</th>
            <th scope="col">Mileage</th>
            <th></th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var route in trainRoutes)
        {
            <tr>
                <td>@lines.FirstOrDefault(l => l.line_id == route.line_id)?.line_name</td>
                <td>
                    @if (route.city_ids != null && route.city_ids.Any())
                    {
                        @foreach (var cityId in route.city_ids)
                        {
                            var city = cities.FirstOrDefault(c => c.city_id == cityId);
                            <span>@city?.city_name</span>
                            if (cityId != route.city_ids.Last()) { <span>, </span> }
                        }
                    }
                </td>
                <td>@string.Join(", ", route.mileage)</td>
                <td><a class="btn btn-secondary" href="/train-routes/update/@route.route_id" role="button">Update</a></td>
                <td><button class="btn btn-danger" @onclick="() => DeleteData(route.route_id)">Delete</button></td>
            </tr>
        }
    </tbody>
</table>
}
@code {
    private bool isLoading = true;
    private string errorMessage = "";
    private TrainRoute[] trainRoutes = new TrainRoute[0];
    private City[] cities = new City[0];
    private Line[] lines = new Line[0];

    protected override async Task OnInitializedAsync()
    {
        try
        {
            trainRoutes = await HttpClient.GetFromJsonAsync<TrainRoute[]>("https://dolphin-app-df2gw.ondigitalocean.app/api/TrainRoute");
            cities = await HttpClient.GetFromJsonAsync<City[]>("https://dolphin-app-df2gw.ondigitalocean.app/api/City");
            lines = await HttpClient.GetFromJsonAsync<Line[]>("https://dolphin-app-df2gw.ondigitalocean.app/api/Line");
            isLoading = false;
        }
        catch (Exception ex)
        {
            errorMessage = "Failed to load data. Please try again later.";
            Console.Error.WriteLine(ex.Message);
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task DeleteData(int id)
    {
        var response = await HttpClient.DeleteAsync($"https://dolphin-app-df2gw.ondigitalocean.app/api/TrainRoute/{id}");

        if (response.IsSuccessStatusCode)
        {
            Navigation.NavigateTo("/train-routes", forceLoad: true);
        }
    }
}
