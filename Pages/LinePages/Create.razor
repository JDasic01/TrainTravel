@page "/lines/add"
@inject Id IdGenerator
@inject HttpClient HttpClient
@using System.Net.Http.Json;
@using System.Net.Http.Headers;
@using Blazor.Data;
@inject NavigationManager Navigation

<PageTitle>Lines</PageTitle>

<h1>Lines</h1>

<a class="btn btn-primary" href="/lines" role="button">Return</a>

<form method="post" onsubmit="@OnSubmit">
    <fieldset>
        <legend>Lines Details</legend>
        <div>
            <label for="CityIds">City line_name</label>
            <input type="text" @bind="lineName" />
        </div>
        <div>
            <label for="Mileage">Mileage</label>
            <input type="text" @bind="mileage" />
        </div>
                <div>
            <label for="Start">start_city_id</label>
            <input type="text" @bind="startCityId" />
        </div>
                <div>
            <label for="End">end_city_id</label>
            <input type="text" @bind="endCityId" />
        </div>
        <div>
            <label>&nbsp;</label>
            <input type="submit" value="Submit" />
        </div>
    </fieldset>
</form>

<p>@createLineStatus</p>

@code {
    private Line line = new Line();
    private string lineName = "";
    private int startCityId = 0;
    private int endCityId = 0;
    private decimal mileage = 0;

    private string createLineStatus = "";

    protected override async Task OnInitializedAsync()
    {
        IdGenerator = new Id();
    }

    private async Task OnSubmit()
    {
        try
        {
            line.line_id = IdGenerator.EntityId;
            line.line_name = lineName; 
            line.start_city_id  = startCityId;
            line.end_city_id  = endCityId;
            line.mileage  = mileage;

            var response = await HttpClient.PostAsJsonAsync("http://api:8082/Line", line);

            if (response.IsSuccessStatusCode)
            {
                Navigation.NavigateTo("/lines");
            }
            else
            {
                // Read and display the error message from the response
                var errorMessage = await response.Content.ReadAsStringAsync();
                createLineStatus = $"Error: {errorMessage}";
            }
        }
        catch (Exception ex)
        {
            createLineStatus = $"Error: {ex.Message}";
        }
    }
}
